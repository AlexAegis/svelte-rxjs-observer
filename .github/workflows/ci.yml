name: CI

on:
  push:
    branches: '**'
  pull_request:
    branches: '**'

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_REMOTE_ONLY: true

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Cache
        id: cache-packages
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install packages
        if: steps.cache-packages.outputs.cache-hit != 'true'
        run: npm install
      - name: Lint
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Cache
        id: cache-packages
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install packages
        if: steps.cache-packages.outputs.cache-hit != 'true'
        run: npm install
      - name: Test
        run: npm run test
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Cache
        id: cache-packages
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install packages
        if: steps.cache-packages.outputs.cache-hit != 'true'
        run: npm install
      - name: Build
        run: npm run build
  deploy:
    name: Deploy
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: [build, test, lint]
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Cache
        id: cache-packages
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Build
        run: BASE_HREF="/${{ github.event.repository.name }}/" npm run build --scope="example"
      - name: Use index.html as 404.html
        run: |
          cp apps/example/dist/index.html apps/example/dist/404.html
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: apps/example/dist
  release:
    name: Release
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: [build, test, lint]
    strategy:
      matrix:
        artifact: ['svelte-rxjs-observer']
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache Packages
        id: cache-packages
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Ensure NPM 8
        run: npm install --global npm@8
      - name: Check if ${{ matrix.artifact }} is already deployed
        run: |
          VERSION=$(cat ".github/version.txt")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          IS_ON_NPM=$(if [ ! -z "$(npm view ${{ matrix.artifact }}@$VERSION 2> /dev/null)" ]; then echo 'true'; else echo 'false'; fi)
          echo "IS_ON_NPM=$IS_ON_NPM" >> $GITHUB_ENV
          echo "was ${{ matrix.artifact }}@$VERSION already on npm: $IS_ON_NPM"
      - name: Install dependencies
        if: env.IS_ON_NPM != 'true'
        run: npm install
      - name: Verify that ${{ matrix.artifact }} builds
        if: env.IS_ON_NPM != 'true'
        run: |
          npx turbo run build --scope="${{ matrix.artifact }}"
      - name: Verify that ${{ matrix.artifact }} lints are succeeding
        if: env.IS_ON_NPM != 'true'
        run: |
          npx turbo run lint --scope="${{ matrix.artifact }}"
      - name: Verify that ${{ matrix.artifact }} tests are succeeding
        if: env.IS_ON_NPM != 'true'
        run: |
          npx turbo run test --scope="${{ matrix.artifact }}"
      - name: Release ${{ matrix.artifact }} on NPM
        if: env.IS_ON_NPM != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm config set '//registry.npmjs.org/:_authToken' "${NPM_TOKEN}"
          npm publish ./dist/libs/${{ matrix.artifact }} --access public
